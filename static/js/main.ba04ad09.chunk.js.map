{"version":3,"sources":["components/card/card.jsx","components/card-list/card-list.jsx","components/search/Search.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","monster","className","alt","src","id","name","email","CardList","props","monsters","map","Search","placeholder","searchChange","type","onChange","App","state","searchField","fetch","then","response","json","users","setState","this","filteredMonsters","filter","toLowerCase","includes","event","target","value","console","log","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mOAGaA,EAAO,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OACC,sBAAKC,UAAU,iBAAf,UACC,qBACCC,IAAI,UACJC,IAAG,+BAA0BH,EAAQI,GAAlC,4BAEJ,6BAAKJ,EAAQK,OACb,4BAAIL,EAAQM,YCPFC,EAAW,SAACC,GACxB,OACC,sBAAKP,UAAU,YAAf,UACE,IACAO,EAAMC,SAASC,KAAI,SAACV,GAAD,OACnB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQI,WCPVO,G,MAAS,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aACrC,OACC,uBACCC,KAAK,SACLb,UAAU,SACVW,YAAaA,EACbG,SAAUF,MCoCEG,G,wDArCd,aAAe,IAAD,8BACb,gBACKC,MAAQ,CACZR,SAAU,GACVS,YAAa,IAJD,E,qDAQd,WAAqB,IAAD,OACnBC,MAAM,8CAEHC,MAAK,SAACC,GAAD,OAAeA,EAASC,UAC7BF,MAAK,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAACf,SAAUc,S,oBAG3C,WAAU,IAAD,OACR,EAAkCE,KAAKR,MAA/BR,EAAR,EAAQA,SAAUS,EAAlB,EAAkBA,YACdQ,EAAmBjB,EAASkB,QAAO,SAAC3B,GAAD,OACtCA,EAAQK,KAAKuB,cAAcC,SAASX,EAAYU,kBASjD,OACC,sBAAK3B,UAAU,MAAf,UACC,0CACA,cAAC,EAAD,CAAQY,aATW,SAACiB,GACrB,EAAKN,SAAS,CAAEN,YAAaY,EAAMC,OAAOC,QAAS,kBAClDC,QAAQC,IAAI,EAAKjB,WAOmBL,YAAY,aAChD,cAAC,EAAD,CAAUH,SAAUiB,W,GAhCNS,cCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBlB,MAAK,YAAkD,IAA/CmB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.ba04ad09.chunk.js","sourcesContent":["import React from 'react'\r\nimport './card.styles.css'\r\n\r\nexport const Card = ({ monster }) => {\r\n\treturn (\r\n\t\t<div className='card-container'>\r\n\t\t\t<img\r\n\t\t\t\talt='monster'\r\n\t\t\t\tsrc={`https://robohash.org/${monster.id}?set=set2&size=180x180`}\r\n\t\t\t/>\r\n\t\t\t<h2>{monster.name}</h2>\r\n\t\t\t<p>{monster.email}</p>\r\n\t\t</div>\r\n\t)\r\n}\r\n","import React from 'react'\r\nimport './card-list.styles.css'\r\nimport { Card } from '../card/card'\r\n\r\nexport const CardList = (props) => {\r\n\treturn (\r\n\t\t<div className='card-list'>\r\n\t\t\t{' '}\r\n\t\t\t{props.monsters.map((monster) => (\r\n\t\t\t\t<Card key={monster.id} monster={monster} />\r\n\t\t\t))}\r\n\t\t</div>\r\n\t)\r\n}\r\n","import React from 'react'\r\nimport './search.styles.css'\r\nexport const Search = ({ placeholder, searchChange }) => {\r\n\treturn (\r\n\t\t<input\r\n\t\t\ttype='search'\r\n\t\t\tclassName='search'\r\n\t\t\tplaceholder={placeholder}\r\n\t\t\tonChange={searchChange}\r\n\t\t></input>\r\n\t)\r\n}\r\n","import './App.css'\nimport { Component } from 'react'\nimport { CardList } from './components/card-list/card-list'\nimport { Search } from './components/search/Search'\nimport { emptyTypeAnnotation } from '@babel/types'\n\nclass App extends Component {\n\tconstructor() {\n\t\tsuper()\n\t\tthis.state = {\n\t\t\tmonsters: [],\n\t\t\tsearchField: '',\n\t\t}\n\t}\n\t//prettier-ignore\n\tcomponentDidMount() {\n\t\tfetch(`https://jsonplaceholder.typicode.com/users`)\n    //returns response in JSON\n    .then((response) => (response.json()))\n    .then(users => this.setState({monsters: users}))\n\t}\n\n\trender() {\n\t\tconst { monsters, searchField } = this.state\n\t\tlet filteredMonsters = monsters.filter((monster) =>\n\t\t\tmonster.name.toLowerCase().includes(searchField.toLowerCase())\n\t\t)\n\n\t\tconst searchChange = (event) => {\n\t\t\tthis.setState({ searchField: event.target.value }, () =>\n\t\t\t\tconsole.log(this.state)\n\t\t\t)\n\t\t}\n\n\t\treturn (\n\t\t\t<div className='App'>\n\t\t\t\t<h1>Monsters</h1>\n\t\t\t\t<Search searchChange={searchChange} placeholder='monsters' />\n\t\t\t\t<CardList monsters={filteredMonsters} />\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}